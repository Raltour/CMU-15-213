#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax
	jmp Condition1

Write:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9	
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx

Write1:
	andq %r8, %r8
	rmmovq %r8, (%rsi)
	jle Write2
	iaddq $1, %rax	

Write2:
	andq %r9, %r9
	rmmovq %r9, 8(%rsi)
	jle Write3
	iaddq $1, %rax	

Write3:
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle Write4
	iaddq $1, %rax	

Write4:
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)
	jle Write5
	iaddq $1, %rax	

Write5:
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)
	jle Write6
	iaddq $1, %rax
	
Write6:
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)
	jle Write7
	iaddq $1, %rax	

Write7:
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)
	jle Write8
	iaddq $1, %rax	
	
Write8:
	andq %rcx, %rcx
	rmmovq %rcx, 56(%rsi)
	jle Next
	iaddq $1, %rax	
	
Next:
	iaddq $64, %rdi
	iaddq $64, %rsi

Condition1:
	iaddq $-8, %rdx
	jge Write

Condition2:				# -8 ~~ -1
	iaddq $4, %rdx		# -4 ~~ 3
	mrmovq (%rdi), %r8
	jge handle_4_to_7
	jmp handle_0_to_3

handle_4_to_7:			#  0 ~~ 3
	iaddq $-2, %rdx
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	jge handle_6_to_7
	jmp handle_4_to_5

handle_0_to_3:			#  -4 ~~ -1
	iaddq $2, %rdx
	mrmovq 8(%rdi), %r9
	jge handle_2_to_3
	jmp handle_0_to_1

handle_6_to_7:			#  0 ~~ 1
	andq %rdx, %rdx	
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	je handle_6
	mrmovq 48(%rdi), %r14
	jmp handle_7

handle_4_to_5:			#  -2 ~~ -1
	iaddq $2, %rdx
	mrmovq 32(%rdi), %r12
	je handle_4
	jmp handle_5

handle_2_to_3:			#  0 ~~ 1
	andq %rdx, %rdx
	mrmovq 16(%rdi), %r10
	je handle_2
	jmp handle_3

handle_0_to_1:			#  -2 ~~ -1
	iaddq $2, %rdx
	je handle_0
	jmp handle_1

handle_7:
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)
	jle handle_6
	iaddq $1, %rax

handle_6:
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)
	jle handle_5
	iaddq $1, %rax

handle_5:
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)
	jle handle_4
	iaddq $1, %rax

handle_4:
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)
	jle handle_3
	iaddq $1, %rax

handle_3:
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle handle_2
	iaddq $1, %rax

handle_2:
	andq %r9, %r9
	rmmovq %r9, 8(%rsi)
	jle handle_1
	iaddq $1, %rax

handle_1:
	andq %r8, %r8
	rmmovq %r8, (%rsi)
	jle handle_0
	iaddq $1, %rax

handle_0:


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad 4
	.quad -5
	.quad 6
	.quad 7
	.quad -8
	.quad 9
	.quad -10
	.quad -11
	.quad -12
	.quad 13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad -18
	.quad 19
	.quad -20
	.quad -21
	.quad 22
	.quad 23
	.quad 24
	.quad -25
	.quad 26
	.quad 27
	.quad 28
	.quad 29
	.quad 30
	.quad 31
	.quad 32
	.quad -33
	.quad 34
	.quad 35
	.quad -36
	.quad 37
	.quad -38
	.quad 39
	.quad 40
	.quad 41
	.quad -42
	.quad -43
	.quad -44
	.quad 45
	.quad 46
	.quad -47
	.quad 48
	.quad -49
	.quad -50
	.quad 51
	.quad -52
	.quad -53
	.quad 54
	.quad -55
	.quad -56
	.quad 57
	.quad -58
	.quad 59
	.quad -60
	.quad 61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
