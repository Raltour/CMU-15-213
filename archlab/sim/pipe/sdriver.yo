                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f67801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f74801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 30f90100000000000000 | 	irmovq $1, %r9
0x03e: 30fb0800000000000000 | 	irmovq $8, %r11
0x048: 30fc0400000000000000 | 	irmovq $4, %r12
0x052: 30fd0300000000000000 | 	irmovq $3, %r13
0x05c: 2021                 | 	rrmovq %rdx, %rcx
0x05e: 61d1                 | 	subq %r13, %rcx			#limit = len - 3
0x060: 62d2                 | 	andq %r13, %rdx		#len %= 4
0x062: 700101000000000000   | 	jmp Condition
                            | 
0x06b:                      | Loop1:	
0x06b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x075: 60b7                 | 	addq %r11, %rdi		# src++
0x077: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x081: 60b6                 | 	addq %r11, %rsi		# dst++	
                            | 
0x083: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x085: 719000000000000000   | 	jle Next1		# if so, goto Npos:
0x08e: 6090                 | 	addq %r9, %rax		# count++
                            | 
0x090:                      | Next1:
0x090: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x09a: 60b7                 | 	addq %r11, %rdi		# src++
0x09c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0a6: 60b6                 | 	addq %r11, %rsi		# dst++	
                            | 
0x0a8: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0aa: 71b500000000000000   | 	jle Next2		# if so, goto Npos:
0x0b3: 6090                 | 	addq %r9, %rax		# count++
                            | 
0x0b5:                      | Next2:
0x0b5: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0bf: 60b7                 | 	addq %r11, %rdi		# src++
0x0c1: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0cb: 60b6                 | 	addq %r11, %rsi		# dst++	
                            | 
0x0cd: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0cf: 71da00000000000000   | 	jle Next3		# if so, goto Npos:
0x0d8: 6090                 | 	addq %r9, %rax		# count++
                            | 
0x0da:                      | Next3:
0x0da: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0e4: 60b7                 | 	addq %r11, %rdi		# src++
0x0e6: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0f0: 60b6                 | 	addq %r11, %rsi		# dst++	
                            | 
0x0f2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0f4: 71ff00000000000000   | 	jle Npos		# if so, goto Npos:
0x0fd: 6090                 | 	addq %r9, %rax		# count++
                            | 
0x0ff:                      | Npos:	
0x0ff: 61c1                 | 	subq %r12, %rcx		# limit -= 4
                            | 
0x101:                      | Condition:
0x101: 6211                 | 	andq %rcx, %rcx		# limit > 0?
0x103: 766b00000000000000   | 	jg Loop1:			# if so, goto Loop1:
0x10c: 703c01000000000000   | 	jmp Condition2
                            | 
                            | 
0x115:                      | Loop2:	
0x115: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
                            | 	
0x11f: 60b7                 | 	addq %r11, %rdi		# src++
0x121: 60b6                 | 	addq %r11, %rsi		# dst++	
                            | 
0x123: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
                            | 
0x12d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x12f: 713a01000000000000   | 	jle Npos2		# if so, goto Npos:
0x138: 6090                 | 	addq %r9, %rax		# count++
                            | 
0x13a:                      | Npos2:	
0x13a: 6192                 | 	subq %r9, %rdx		# len--
                            | 
0x13c:                      | Condition2:
0x13c: 6222                 | 	andq %rdx, %rdx		# len > 0?
0x13e: 761501000000000000   | 	jg Loop2:			# if so, goto Loop:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x147:                      | Done:
0x147: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x148:                      | End:
                            | #/* $end ncopy-ys */
0x148:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x148:                      | 	.align 8
0x148:                      | src:
0x148: ffffffffffffffff     | 	.quad -1
0x150: feffffffffffffff     | 	.quad -2
0x158: 0300000000000000     | 	.quad 3
0x160: 0400000000000000     | 	.quad 4
0x168: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x170:                      | 	.align 16
0x170:                      | Predest:
0x170: fadebc0000000000     | 	.quad 0xbcdefa
0x178:                      | dest:
0x178: abefcd0000000000     | 	.quad 0xcdefab
0x180: abefcd0000000000     | 	.quad 0xcdefab
0x188: abefcd0000000000     | 	.quad 0xcdefab
0x190: abefcd0000000000     | 	.quad 0xcdefab
0x198:                      | Postdest:
0x198: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x1a0:                      | .align 8
                            | # Run time stack
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
                            | 
0x220:                      | Stack:
