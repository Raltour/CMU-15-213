                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f61801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e800000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 30f90100000000000000 | 	irmovq $1, %r9
0x03e: 30fb0800000000000000 | 	irmovq $8, %r11
0x048: 30fc0200000000000000 | 	irmovq $2, %r12
0x052: 2021                 | 	rrmovq %rdx, %rcx		
0x054: 6191                 | 	subq %r9, %rcx			#limit = len - 1
0x056: 6292                 | 	andq %r9, %rdx		#len %= 2
0x058: 70ad00000000000000   | 	jmp Condition
                            | 
0x061:                      | Loop:	
0x061: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
                            | 	
0x06b: 60b7                 | 	addq %r11, %rdi		# src++
0x06d: 60b6                 | 	addq %r11, %rsi		# dst++	
                            | 
0x06f: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
                            | 
0x079: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x07b: 718600000000000000   | 	jle Next		# if so, goto Npos:
0x084: 6090                 | 	addq %r9, %rax		# count++
                            | 
0x086:                      | Next:
0x086: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
                            | 	
0x090: 60b7                 | 	addq %r11, %rdi		# src++
0x092: 60b6                 | 	addq %r11, %rsi		# dst++	
                            | 
0x094: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
                            | 
0x09e: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0a0: 71ab00000000000000   | 	jle Npos		# if so, goto Npos:
0x0a9: 6090                 | 	addq %r9, %rax		# count++
                            | 
0x0ab:                      | Npos:	
0x0ab: 61c1                 | 	subq %r12, %rcx		# limit -= 2
                            | 
0x0ad:                      | Condition:
0x0ad: 6211                 | 	andq %rcx, %rcx		# limit > 0?
0x0af: 766100000000000000   | 	jg Loop:			# if so, goto Loop:
0x0b8: 6222                 | 	andq %rdx, %rdx
0x0ba: 71e400000000000000   | 	jle Done
0x0c3: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0cd: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0d7: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0d9: 71e400000000000000   | 	jle Done		# if so, goto Npos:
0x0e2: 6090                 | 	addq %r9, %rax		# count++
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0e4:                      | Done:
0x0e4: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0e5:                      | End:
                            | #/* $end ncopy-ys */
0x0e5:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x0e8:                      | 	.align 8
0x0e8:                      | src:
0x0e8: ffffffffffffffff     | 	.quad -1
0x0f0: feffffffffffffff     | 	.quad -2
0x0f8: 0300000000000000     | 	.quad 3
0x100: 0400000000000000     | 	.quad 4
0x108: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x110:                      | 	.align 16
0x110:                      | Predest:
0x110: fadebc0000000000     | 	.quad 0xbcdefa
0x118:                      | dest:
0x118: abefcd0000000000     | 	.quad 0xcdefab
0x120: abefcd0000000000     | 	.quad 0xcdefab
0x128: abefcd0000000000     | 	.quad 0xcdefab
0x130: abefcd0000000000     | 	.quad 0xcdefab
0x138:                      | Postdest:
0x138: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x140:                      | .align 8
                            | # Run time stack
0x140: 0000000000000000     | 	.quad 0
0x148: 0000000000000000     | 	.quad 0
0x150: 0000000000000000     | 	.quad 0
0x158: 0000000000000000     | 	.quad 0
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
                            | 
0x1c0:                      | Stack:
