#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	irmovq $1, %r9
	irmovq $8, %r11
	irmovq $4, %r12
	irmovq $3, %r13
	rrmovq %rdx, %rcx
	subq %r13, %rcx			#limit = len - 3
	andq %r13, %rdx		#len %= 4
	jmp Condition

Loop1:	
	mrmovq (%rdi), %r10	# read val from src...
	addq %r11, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	addq %r11, %rsi		# dst++	

	andq %r10, %r10		# val <= 0?
	jle Next1		# if so, goto Npos:
	addq %r9, %rax		# count++

Next1:
	mrmovq (%rdi), %r10	# read val from src...
	addq %r11, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	addq %r11, %rsi		# dst++	

	andq %r10, %r10		# val <= 0?
	jle Next2		# if so, goto Npos:
	addq %r9, %rax		# count++

Next2:
	mrmovq (%rdi), %r10	# read val from src...
	addq %r11, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	addq %r11, %rsi		# dst++	

	andq %r10, %r10		# val <= 0?
	jle Next3		# if so, goto Npos:
	addq %r9, %rax		# count++

Next3:
	mrmovq (%rdi), %r10	# read val from src...
	addq %r11, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	addq %r11, %rsi		# dst++	

	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	addq %r9, %rax		# count++

Npos:	
	subq %r12, %rcx		# limit -= 4

Condition:
	andq %rcx, %rcx		# limit > 0?
	jg Loop1:			# if so, goto Loop1:
	jmp Condition2


Loop2:	
	mrmovq (%rdi), %r10	# read val from src...
	addq %r11, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	addq %r11, %rsi		# dst++	

	andq %r10, %r10		# val <= 0?
	jle Npos2		# if so, goto Npos:
	addq %r9, %rax		# count++

Npos2:	
	subq %r9, %rdx		# len--

Condition2:
	andq %rdx, %rdx		# len > 0?
	jg Loop2:			# if so, goto Loop:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
