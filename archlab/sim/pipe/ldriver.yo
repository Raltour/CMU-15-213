                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f64803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax
                            | 
0x034: 30fc0100000000000000 | 	irmovq $1, %r12
0x03e: 30fd0400000000000000 | 	irmovq $4, %r13
0x048: 30fe2000000000000000 | 	irmovq $32, %r14
0x052: 30f10800000000000000 | 	irmovq $8, %rcx
0x05c: 70ed00000000000000   | 	jmp Condition1
                            | 
0x065:                      | Write:
0x065: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x06f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	
0x079: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x083: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
                            | 
0x08d:                      | Write1:
0x08d: 6288                 | 	andq %r8, %r8
0x08f: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x099: 71a400000000000000   | 	jle Write2
0x0a2: 60c0                 | 	addq %r12, %rax	
                            | 
0x0a4:                      | Write2:
0x0a4: 6299                 | 	andq %r9, %r9
0x0a6: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0b0: 71bb00000000000000   | 	jle Write3
0x0b9: 60c0                 | 	addq %r12, %rax	
                            | 
0x0bb:                      | Write3:
0x0bb: 62aa                 | 	andq %r10, %r10
0x0bd: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0c7: 71d200000000000000   | 	jle Write4
0x0d0: 60c0                 | 	addq %r12, %rax	
                            | 
0x0d2:                      | Write4:
0x0d2: 62bb                 | 	andq %r11, %r11
0x0d4: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0de: 71e900000000000000   | 	jle Next
0x0e7: 60c0                 | 	addq %r12, %rax	
                            | 	
0x0e9:                      | Next:
0x0e9: 60e7                 | 	addq %r14, %rdi
0x0eb: 60e6                 | 	addq %r14, %rsi
                            | 
0x0ed:                      | Condition1:
0x0ed: 61d2                 | 	subq %r13, %rdx
0x0ef: 756500000000000000   | 	jge Write
0x0f8: 60d2                 | 	addq %r13, %rdx
0x0fa: 702801000000000000   | 	jmp Condition2
                            | 
0x103:                      | Loop:
0x103: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x10d: 6017                 | 	addq %rcx, %rdi
0x10f: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x119: 6016                 | 	addq %rcx, %rsi
0x11b: 6288                 | 	andq %r8, %r8
0x11d: 712801000000000000   | 	jle Condition2
0x126: 60c0                 | 	addq %r12, %rax
                            | 
0x128:                      | Condition2:
0x128: 61c2                 | 	subq %r12, %rdx
0x12a: 750301000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x133:                      | Done:
0x133: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x134:                      | End:
                            | #/* $end ncopy-ys */
0x134:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x138:                      | 	.align 8
0x138:                      | src:
0x138: ffffffffffffffff     | 	.quad -1
0x140: 0200000000000000     | 	.quad 2
0x148: fdffffffffffffff     | 	.quad -3
0x150: fcffffffffffffff     | 	.quad -4
0x158: fbffffffffffffff     | 	.quad -5
0x160: faffffffffffffff     | 	.quad -6
0x168: 0700000000000000     | 	.quad 7
0x170: f8ffffffffffffff     | 	.quad -8
0x178: 0900000000000000     | 	.quad 9
0x180: 0a00000000000000     | 	.quad 10
0x188: f5ffffffffffffff     | 	.quad -11
0x190: f4ffffffffffffff     | 	.quad -12
0x198: 0d00000000000000     | 	.quad 13
0x1a0: f2ffffffffffffff     | 	.quad -14
0x1a8: f1ffffffffffffff     | 	.quad -15
0x1b0: f0ffffffffffffff     | 	.quad -16
0x1b8: efffffffffffffff     | 	.quad -17
0x1c0: 1200000000000000     | 	.quad 18
0x1c8: 1300000000000000     | 	.quad 19
0x1d0: ecffffffffffffff     | 	.quad -20
0x1d8: 1500000000000000     | 	.quad 21
0x1e0: 1600000000000000     | 	.quad 22
0x1e8: 1700000000000000     | 	.quad 23
0x1f0: 1800000000000000     | 	.quad 24
0x1f8: e7ffffffffffffff     | 	.quad -25
0x200: 1a00000000000000     | 	.quad 26
0x208: e5ffffffffffffff     | 	.quad -27
0x210: e4ffffffffffffff     | 	.quad -28
0x218: e3ffffffffffffff     | 	.quad -29
0x220: 1e00000000000000     | 	.quad 30
0x228: 1f00000000000000     | 	.quad 31
0x230: e0ffffffffffffff     | 	.quad -32
0x238: 2100000000000000     | 	.quad 33
0x240: deffffffffffffff     | 	.quad -34
0x248: 2300000000000000     | 	.quad 35
0x250: 2400000000000000     | 	.quad 36
0x258: 2500000000000000     | 	.quad 37
0x260: daffffffffffffff     | 	.quad -38
0x268: 2700000000000000     | 	.quad 39
0x270: d8ffffffffffffff     | 	.quad -40
0x278: 2900000000000000     | 	.quad 41
0x280: d6ffffffffffffff     | 	.quad -42
0x288: 2b00000000000000     | 	.quad 43
0x290: 2c00000000000000     | 	.quad 44
0x298: 2d00000000000000     | 	.quad 45
0x2a0: 2e00000000000000     | 	.quad 46
0x2a8: d1ffffffffffffff     | 	.quad -47
0x2b0: d0ffffffffffffff     | 	.quad -48
0x2b8: cfffffffffffffff     | 	.quad -49
0x2c0: ceffffffffffffff     | 	.quad -50
0x2c8: cdffffffffffffff     | 	.quad -51
0x2d0: ccffffffffffffff     | 	.quad -52
0x2d8: cbffffffffffffff     | 	.quad -53
0x2e0: caffffffffffffff     | 	.quad -54
0x2e8: 3700000000000000     | 	.quad 55
0x2f0: 3800000000000000     | 	.quad 56
0x2f8: c7ffffffffffffff     | 	.quad -57
0x300: 3a00000000000000     | 	.quad 58
0x308: c5ffffffffffffff     | 	.quad -59
0x310: 3c00000000000000     | 	.quad 60
0x318: 3d00000000000000     | 	.quad 61
0x320: 3e00000000000000     | 	.quad 62
0x328: 3f00000000000000     | 	.quad 63
0x330: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x340:                      | 	.align 16
0x340:                      | Predest:
0x340: fadebc0000000000     | 	.quad 0xbcdefa
0x348:                      | dest:
0x348: abefcd0000000000     | 	.quad 0xcdefab
0x350: abefcd0000000000     | 	.quad 0xcdefab
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540:                      | Postdest:
0x540: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x548:                      | .align 8
                            | # Run time stack
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
                            | 
0x5c8:                      | Stack:
